[{"C:\\Studies\\REACT\\ellocent\\src\\reportWebVitals.js":"1","C:\\Studies\\REACT\\ellocent\\src\\store.js":"2","C:\\Studies\\REACT\\ellocent\\src\\Reducers\\index.js":"3","C:\\Studies\\REACT\\ellocent\\src\\App.js":"4","C:\\Studies\\REACT\\ellocent\\src\\Components\\Appbar.js":"5","C:\\Studies\\REACT\\ellocent\\src\\Components\\TodoForm.js":"6","C:\\Studies\\REACT\\ellocent\\src\\index.js":"7","C:\\Studies\\REACT\\ellocent\\src\\Reducers\\TodoReducers.js":"8","C:\\Studies\\REACT\\ellocent\\src\\Actions\\types.js":"9","C:\\Studies\\REACT\\ellocent\\src\\Components\\TodoList.js":"10","C:\\Studies\\REACT\\ellocent\\src\\Actions\\index.js":"11","C:\\Studies\\REACT\\ellocent\\src\\Components\\updateTodo.js":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":430,"mtime":1606204383210,"results":"15","hashOfConfig":"14"},{"size":176,"mtime":1606223237062,"results":"16","hashOfConfig":"14"},{"size":156,"mtime":1606222272674,"results":"17","hashOfConfig":"14"},{"size":3165,"mtime":1606227106022,"results":"18","hashOfConfig":"14"},{"size":3473,"mtime":1606227173155,"results":"19","hashOfConfig":"14"},{"size":610,"mtime":1606202859858,"results":"20","hashOfConfig":"14"},{"size":1908,"mtime":1606288005482,"results":"21","hashOfConfig":"14"},{"size":242,"mtime":1606284843463,"results":"22","hashOfConfig":"14"},{"size":3155,"mtime":1606287757725,"results":"23","hashOfConfig":"14"},{"size":1246,"mtime":1606287733786,"results":"24","hashOfConfig":"14"},{"size":3516,"mtime":1606287713301,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ziokwv",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"39"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Studies\\REACT\\ellocent\\src\\reportWebVitals.js",[],"C:\\Studies\\REACT\\ellocent\\src\\store.js",[],"C:\\Studies\\REACT\\ellocent\\src\\Reducers\\index.js",[],"C:\\Studies\\REACT\\ellocent\\src\\App.js",[],"C:\\Studies\\REACT\\ellocent\\src\\Components\\Appbar.js",["53"],"C:\\Studies\\REACT\\ellocent\\src\\Components\\TodoForm.js",["54"],"import React, { useState } from 'react'\r\nimport { Grid } from '@material-ui/core'\r\nimport './Styles/TodoForm.css'\r\nimport { useDispatch,useSelector} from 'react-redux'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Input, TextareaAutosize, Button } from '@material-ui/core';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { uuid } from 'uuidv4';\r\nimport {addTodo} from \"../Actions/index\"\r\nimport {showForm} from \"../Actions/index\"\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        margin: theme.spacing(1),\r\n        minWidth: 120,\r\n    },\r\n    selectEmpty: {\r\n        marginTop: theme.spacing(2),\r\n    },\r\n}));\r\nfunction TodoForm() {\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n    const [title, settitle] = useState(\"\")\r\n    const [description, setdescription] = useState(\"\")\r\n    const [status, setstatus] = useState('');\r\n    const handleChange = (event) => {\r\n        setstatus(event.target.value);\r\n    };\r\n    const handleSubmit = e =>{\r\n        e.preventDefault();\r\n        const todo = {\r\n            key:uuid(),\r\n            title : title,\r\n            description:description,\r\n            status:status\r\n        }\r\n        \r\n        \r\n        dispatch(addTodo(todo))\r\n        dispatch(showForm())\r\n    } \r\n    const todos = useSelector(state => state.todos);\r\n    return (\r\n        <div className = \"TodoForm\">\r\n            <Grid container direction=\"row\" justify=\"center\" alignItems=\"center\" className=\"mainForm\" >\r\n                <form className=\"mainForm__div\"  onSubmit = {handleSubmit}>\r\n                    <Input placeholder=\"Title\" style={{ width: \"500px\" }} onChange = {(e)=>settitle(e.target.value)} value = {title}></Input>\r\n                    <br></br>\r\n                    <br></br>\r\n                    <TextareaAutosize style={{ width: \"500px\", height: \"300px\", resize: \"none\", padding: \"12px\" }} value = {description} onChange = {(e)=>setdescription(e.target.value)} />\r\n                    <FormControl className={classes.formControl}>\r\n                        <InputLabel id=\"demo-simple-select-label\">Status</InputLabel>\r\n                        <Select\r\n                            labelId=\"demo-simple-select-label\"\r\n                            id=\"demo-simple-select\"\r\n                            value={status}\r\n                            onChange={handleChange}\r\n                        >\r\n                            <MenuItem value={\"draft\"}>Draft</MenuItem>\r\n                            <MenuItem value={\"pending\"}>Pending</MenuItem>\r\n                            <MenuItem value={\"in-progress\"}>In Progress</MenuItem>\r\n                            <MenuItem value={\"completed\"}>Completed</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <div className = \"mainForm__btns\">\r\n                    <Button variant=\"contained\" color=\"primary\" type = \"submit\">\r\n                        Submit\r\n                    </Button>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => dispatch(showForm())}>\r\n                        Close\r\n                    </Button>\r\n                    </div>\r\n                    \r\n                </form>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n",["55","56"],"C:\\Studies\\REACT\\ellocent\\src\\index.js",[],"C:\\Studies\\REACT\\ellocent\\src\\Reducers\\TodoReducers.js",[],"C:\\Studies\\REACT\\ellocent\\src\\Actions\\types.js",[],"C:\\Studies\\REACT\\ellocent\\src\\Components\\TodoList.js",["57"],"import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport \"./Styles/TodoList.css\"\r\nimport { Typography } from '@material-ui/core';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {showUpdate, opKey, deleteTodo} from \"../Actions/index\"\r\n\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport UpdateTodo from './updateTodo';\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(2),\r\n        textAlign: 'center',\r\n        color: theme.palette.text.secondary,\r\n        margin:\"30px\",\r\n        height:\"300px\",\r\n        \r\n        \r\n    },\r\n}));\r\n\r\nfunction TodoList() {\r\n    \r\n    const todos = useSelector(state => state.todos);\r\n    const classes = useStyles();\r\n    const dispatch = useDispatch();\r\n    const handleCanel = (e)=>{\r\n        // dispatch(opKey(e));\r\n        dispatch(deleteTodo(e));\r\n        // dispatch(opKey(null))\r\n\r\n    }\r\n    const handleEdit = (e) =>{\r\n        dispatch(opKey(e));\r\n        dispatch(showUpdate())\r\n        dispatch(opKey(null))\r\n    }\r\n    \r\n    return (\r\n\r\n        <div className = \"TodoList\">\r\n                \r\n                {todos.showUpdate?<UpdateTodo />:<h2><Grid container spacing = {3} >\r\n                {todos.todos.map(todo => (\r\n                    <Grid xs={12} sm={6}>\r\n                    <Paper className={classes.paper} key = {todo.key}>\r\n                        <div className = \"TodoList__item\">\r\n                            <div className = \"TodoList__item__title\">\r\n                                <div className = \"TodoList__item__title__title\">\r\n                                    <Typography variant=\"h4\">\r\n                                    {todo.title} \r\n                                    </Typography>\r\n                                </div>\r\n                                <div className = \"TodoList__item__title__icon\" id = {todo.key} onClick = {(e)=>handleEdit(todo.key)} >\r\n                                    <EditIcon style = {{marginRight:\"8px\",color:\"#002884\"}} />\r\n                                    \r\n                                </div>\r\n                                <div>\r\n                                    <CancelIcon style = {{color:\"#ba000d\"}} onClick = {(e)=>handleCanel(todo.key)}/>\r\n                                </div>\r\n                                \r\n                            </div>\r\n                            <div className = \"TodoList__item__desc\" >\r\n                                {todo.description}  \r\n                            </div>\r\n                            <div>\r\n                               Status - {todo.status}\r\n                            </div>\r\n                            \r\n                            \r\n                        </div>\r\n                        \r\n                    </Paper>\r\n                    </Grid>\r\n                ))}\r\n                </Grid></h2>}\r\n          \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoList\r\n","C:\\Studies\\REACT\\ellocent\\src\\Actions\\index.js",[],"C:\\Studies\\REACT\\ellocent\\src\\Components\\updateTodo.js",[],{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"62","line":45,"column":11,"nodeType":"60","messageId":"61","endLine":45,"endColumn":16},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","replacedBy":"66"},{"ruleId":"58","severity":1,"message":"59","line":1,"column":17,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'todos' is assigned a value but never used.","no-native-reassign",["67"],"no-negated-in-lhs",["68"],"no-global-assign","no-unsafe-negation"]